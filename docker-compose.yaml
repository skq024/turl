version: '3.8'

services:
  # PostgreSQL database with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-census_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-census_password}
      POSTGRES_DB: ${POSTGRES_DB:-census_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis cache
  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DB_CONNECTION_STRING: postgresql://${POSTGRES_USER:-census_user}:${POSTGRES_PASSWORD:-census_password}@postgres:5432/${POSTGRES_DB:-census_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      HOST: 0.0.0.0
      PORT: 8000
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Data scraper service (runs as a one-time job)
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    environment:
      DB_CONNECTION_STRING: postgresql://${POSTGRES_USER:-census_user}:${POSTGRES_PASSWORD:-census_password}@postgres:5432/${POSTGRES_DB:-census_db}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./scraper/data:/app/data
    # Only run when explicitly started with docker-compose run scraper
    profiles: ["manual"]

  # Frontend web service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Set API URL for frontend to use
        API_URL: ${API_URL:-http://localhost:8000/api}
        MAPBOX_TOKEN: ${MAPBOX_TOKEN}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: